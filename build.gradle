buildscript {
    ext {
        googleCloudBomVersion = '0.110.0-alpha'
        springBootVersion = '2.2.1.RELEASE'
        kotlinVersion = '1.3.50'
        lettuceVersion = '5.2.1.RELEASE'
        lombokVersion = '1.18.6'
    }
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.11'
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.11.0'
    }
}

configure(subprojects.findAll { relativePath(it.projectDir).startsWith('app') }) {
    apply plugin: 'java'
}

configure(subprojects.findAll { relativePath(it.projectDir).startsWith('libs/') }) {
    apply plugin: 'java-library'
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'

    group 'moe.pine.translatebot'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configurations {
        implementation.exclude module: 'spring-boot-starter-tomcat'
    }
    repositories {
        jcenter()
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:unchecked'
        options.compilerArgs << '-Xlint:deprecation'
    }
}


subprojects {
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "com.google.cloud:google-cloud-bom:$googleCloudBomVersion"
        }
        dependencies {
            dependency 'javax.servlet:javax.servlet-api:4.0.1'

            // Guava
            dependency 'com.google.guava:guava:27.0.1-jre'

            // Apache Commons
            dependency 'org.apache.commons:commons-lang3:3.8.1'
            dependency 'org.apache.commons:commons-collections4:4.3'

            // Slack
            dependency 'com.github.seratch:jslack:3.0.1'
            dependency 'javax.websocket:javax.websocket-api:1.1'
            dependency 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.13'

            // Redis
            dependency "io.lettuce:lettuce-core:$lettuceVersion"

            // Utilities
            dependency "org.projectlombok:lombok:$lombokVersion"
            dependency 'moe.pine:heroku-addons:0.2.1'
            dependency 'moe.pine:spring-cache-interceptors:0.1.2'

            // Test
            dependency 'junit:junit:4.12'
            dependency 'org.mockito:mockito-core:2.24.5'
        }
    }
    dependencies {
        // Lombok
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'

        // Annotations
        compileOnly 'net.jcip:jcip-annotations:1.0'
        compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'

        // Logging
        implementation 'org.slf4j:slf4j-api'
        implementation 'ch.qos.logback:logback-classic'
    }
}


// ----- Configuration ------------------------------------

def confFiles = fileTree('credentials').include('**/*.yml', '**/*.json')
confFiles.forEach { File src ->
    def dest = new File(
        src.absolutePath.replace("${rootDir.absolutePath}/credentials", rootDir.absolutePath))
    if (src.name.endsWith('.yml')) {
        dest.write("# This YAML source file was generated by the Gradle.\n\n")
    } else {
        dest.setBytes([] as byte[])
    }
    dest.append(src.readBytes())
}
